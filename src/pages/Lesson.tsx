import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import {
  Brain,
  ArrowLeft,
  Send,
  BookOpen,
  MessageCircle,
  MessageSquare,
  User,
  CheckCircle,
  Play,
  ArrowRight
} from 'lucide-react';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { Bar, Line, Pie, Doughnut } from 'react-chartjs-2';
import 'katex/dist/katex.min.css';
import { InlineMath, BlockMath } from 'react-katex';

// Component for rendering LaTeX in text
const LatexText = ({ text }: { text: string }) => {
  const parts = text.split(/(\$\$[\s\S]*?\$\$|\$[\s\S]*?\$)/g);

  return (
    <>
      {parts.map((part, index) => {
        if (part.startsWith('$$') && part.endsWith('$$')) {
          // Block math
          const math = part.slice(2, -2);
          return <BlockMath key={index} math={math} />;
        } else if (part.startsWith('$') && part.endsWith('$') && part.length > 2) {
          // Inline math
          const math = part.slice(1, -1);
          return <InlineMath key={index} math={math} />;
        } else {
          // Regular text - convert line breaks
          return <span key={index} style={{ whiteSpace: 'pre-wrap' }}>{part}</span>;
        }
      })}
    </>
  );
};

// Component for rendering lesson content with LaTeX support
const LessonContent = ({ content, generatedImages }: { content: string, generatedImages: Record<string, string> }) => {
  // Split content by different markers
  const parts = content.split(/(<\w+[^>]*>.*?<\/\w+>|\$\$[\s\S]*?\$\$|\$[\s\S]*?\$|\[.*?\]|\[Генерация изображения.*?\]|\[Изображение: .*?\])/g);

  return (
    <div className="text-sm leading-relaxed">
      {parts.map((part, index) => {
        if (part.startsWith('$$') && part.endsWith('$$')) {
          // Block math
          const math = part.slice(2, -2);
          return <BlockMath key={index} math={math} />;
        } else if (part.startsWith('$') && part.endsWith('$') && part.length > 2) {
          // Inline math
          const math = part.slice(1, -1);
          return <InlineMath key={index} math={math} />;
        } else if (part.startsWith('[') && part.endsWith(']')) {
          // LaTeX in square brackets (fallback for \[...\])
          const math = part.slice(1, -1);
          return <BlockMath key={index} math={math} />;
        } else if (part.includes('[Генерация изображения')) {
          // Image generation placeholder
          return (
            <div key={index} className="inline-block mx-2 my-2 p-4 border-2 border-dashed border-gray-300 rounded-lg bg-gray-50">
              <div className="text-sm text-gray-500 text-center">
                <div className="animate-spin inline-block w-4 h-4 border-2 border-gray-300 border-t-blue-500 rounded-full mr-2"></div>
                Генерация изображения...
              </div>
            </div>
          );
        } else if (part.includes('[Изображение:')) {
          // Generated image
          const description = part.match(/\[Изображение: (.*?)\]/)?.[1] || '';
          const imageKey = `image_${Object.keys(generatedImages).length - 1}`;
          return (
            <div key={index} className="inline-block mx-2 my-2">
              <img src={generatedImages[imageKey]} alt={description} className="max-w-xs rounded-lg shadow-lg border" />
              <div className="text-xs text-gray-500 mt-1 text-center">AI Generated</div>
            </div>
          );
        } else if (part.includes('<')) {
          // HTML content (tables, charts)
          return <div key={index} dangerouslySetInnerHTML={{ __html: part }} />;
        } else if (part.includes('<br>')) {
          // Handle line breaks
          const lines = part.split('<br>');
          return (
            <span key={index}>
              {lines.map((line, lineIndex) => (
                <React.Fragment key={lineIndex}>
                  {line}
                  {lineIndex < lines.length - 1 && <br />}
                </React.Fragment>
              ))}
            </span>
          );
        } else {
          // Regular text
          return <span key={index} style={{ whiteSpace: 'pre-wrap' }}>{part}</span>;
        }
      })}
    </div>
  );
};

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  Title,
  Tooltip,
  Legend
);

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

// Function to get course and module info
const getCourseAndModuleInfo = (moduleId: number, lessonId: number) => {
  // This should match the structure in CourseDetail.tsx
  const courses = [
    { // 0 - Русский язык
      name: 'Русский язык',
      modules: [
        'Русская литература XIX века',
        'Серебряный век русской литературы',
        'Советская литература',
        'Современная русская литература',
        'Филология и лингвистика'
      ]
    },
    { // 1 - Английский язык
      name: 'Английский язык',
      modules: [
        'Основы английского',
        'Грамматика для начинающих',
        'Развитие словарного запаса',
        'Разговорная практика',
        'Продвинутая грамматика',
        'Бизнес английский'
      ]
    },
    { // 2 - Арабский язык
      name: 'Арабский язык',
      modules: [
        'Арабский алфавит',
        'Фонетика и произношение',
        'Базовая грамматика',
        'Разговорная практика'
      ]
    },
    { // 3 - Китайский язык
      name: 'Китайский язык',
      modules: [
        'Пиньинь и тоны',
        'Основные иероглифы',
        'Базовая грамматика',
        'Разговорная практика'
      ]
    },
    { // 4 - Математика
      name: 'Математика',
      modules: [
        'Арифметика и алгебра',
        'Геометрия',
        'Тригонометрия',
        'Математический анализ'
      ]
    },
    { // 5 - Физика
      name: 'Физика',
      modules: [
        'Механика',
        'Молекулярная физика',
        'Электричество и магнетизм',
        'Оптика'
      ]
    },
    { // 6 - География
      name: 'География',
      modules: [
        'Физическая география',
        'Политическая карта мира',
        'Климатология',
        'Экономическая география'
      ]
    },
    { // 7 - История
      name: 'История',
      modules: [
        'Древняя история',
        'Средние века',
        'Новое время',
        'История России'
      ]
    }
  ];

  const course = courses[moduleId];
  if (!course) return { courseName: 'Неизвестный курс', moduleName: 'Неизвестный модуль', lessonNumber: lessonId + 1 };

  return {
    courseName: course.name,
    moduleName: course.modules[lessonId] || `Урок ${lessonId + 1}`,
    lessonNumber: lessonId + 1
  };
};

const lessonContent: Record<string, any> = {
  // Модуль 1: Падежи русского языка
  '0-0': {
    title: 'Введение в падежи',
    theory: `
# Введение в падежи русского языка

## Глава 1: Что такое падежи? Основные понятия

### 1.1 Определение падежа

**Падеж** (лат. casus - падение, случай) - это грамматическая категория существительных, прилагательных, местоимений, причастий и числительных, которая показывает синтаксическую роль слова в предложении и его связь с другими словами.

Падеж - это не просто окончание слова, а сложная система грамматических отношений, которая позволяет точно выражать мысли и строить правильные предложения.

### 1.2 Историческая справка

Падежная система русского языка уходит корнями в древнерусский язык, который был значительно богаче падежами (до 7-8 падежей). Современный русский язык сохранил 6 падежей, что является оптимальным количеством для эффективной коммуникации.

Интересный факт: в некоторых славянских языках (например, в польском) сохранилось 7 падежей, а в английском языке падежей практически нет - их роль выполняют предлоги и порядок слов.

### 1.3 Зачем нужны падежи?

Падежи выполняют несколько важных функций:

1. **Синтаксическая функция**: показывают роль слова в предложении
2. **Семантическая функция**: уточняют смысл высказывания
3. **Коммуникативная функция**: позволяют строить сложные предложения
4. **Стилистическая функция**: помогают создавать выразительность речи

Без падежей наша речь была бы примитивной: "Я иду в магазин. Я покупаю хлеб в магазин." Вместо этого мы говорим: "Я иду в магазин и покупаю там хлеб."

### 1.4 Как падежи влияют на понимание текста

Рассмотрим предложение: "Студент читает книгу преподавателя"

Без знания падежей невозможно понять, кто кому принадлежит книга. Правильное понимание возможно только благодаря падежам:
- Студент (И.п.) - подлежащее
- читает - сказуемое
- книгу (В.п.) - прямое дополнение
- преподавателя (Р.п.) - показывает принадлежность книги

## Глава 2: Шесть падежей русского языка

### 2.1 Именительный падеж (Nominativus)

**Вопросы:** кто? что?
**Основная роль:** подлежащее, именная часть сказуемого, приложение, обращение

**Примеры:**
- Студент читает книгу. (подлежащее)
- Это моя книга. (именная часть)
- Маша, подойди сюда! (обращение)
- Москва - столица России. (подлежащее в назывном предложении)

**Особенности:**
- Исходная форма слова
- Не требует предлогов (кроме некоторых случаев)
- Может выражать тему разговора

### 2.2 Родительный падеж (Genitivus)

**Вопросы:** кого? чего? (чей? чья? чьё? чьи?)
**Основная роль:** показывает принадлежность, часть от целого, отрицание

**Примеры:**
- Книга студента (принадлежность)
- Чаша чая (часть от целого)
- Нет времени (отрицание)
- Боюсь темноты (объект чувства)

**С предлогами:**
- из/с: вышел из дома, вернулся с работы
- у: был у друга, спросил у учителя
- от: получил письмо от мамы
- до: работал до вечера
- для: купил подарок для сестры
- без: пришел без зонта
- около: сижу около окна

### 2.3 Дательный падеж (Dativus)

**Вопросы:** кому? чему?
**Основная роль:** косвенное дополнение, показывает направление действия

**Примеры:**
- Дал книгу другу (косвенное дополнение)
- Помогаю маме (косвенное дополнение)
- Ему 20 лет (возраст)
- Подошел к дому (направление)

**С предлогами:**
- к: подошел к дому, относится к делу
- по: гуляю по парку, работаю по специальности
- благодаря: закончил благодаря помощи
- вопреки: сделал вопреки совету
- согласно: согласно приказу

### 2.4 Винительный падеж (Accusativus)

**Вопросы:** кого? что?
**Основная роль:** прямое дополнение, показывает объект действия

**Примеры:**
- Читаю книгу (прямое дополнение)
- Вижу друга (прямое дополнение)
- Люблю музыку (объект чувства)
- Жду автобуса (объект ожидания)

**Важное правило одушевленности:**
- Одушевленные существительные: форма совпадает с дательным падежом
- Неодушевленные существительные: форма совпадает с именительным падежом

**Исключения:** некоторые слова типа "мать", "дочь" имеют особые формы в винительном падеже.

### 2.5 Творительный падеж (Instrumentalis)

**Вопросы:** кем? чем?
**Основная роль:** инструмент действия, способ, совместность

**Примеры:**
- Пишу ручкой (инструмент)
- Говорю шепотом (способ)
- Гуляю с другом (совместность)
- Работаю врачом (профессия)

**С предлогами:**
- с/со: пью чай с лимоном, пришел с работы
- за: сижу за столом, отвечаю за работу
- под: лежу под одеялом, сижу под деревом
- над: вишу над пропастью, думаю над задачей
- между: сижу между друзьями
- перед: стою перед домом

### 2.6 Предложный падеж (Locativus/Prepositionalis)

**Вопросы:** о ком? о чём? (в ком? в чём? на ком? на чём?)
**Основная роль:** обстоятельство места, времени, тема разговора

**Примеры:**
- Живу в доме (место)
- Приехал в мае (время)
- Говорю о книге (тема)
- Думаю о будущем (тема)

**Всегда используется с предлогами:**
- в/во: живу в городе, верю в успех
- на: лежу на диване, учусь на отлично
- о/об: говорю о работе, думаю об отдыхе
- при: работаю при университете, случилось при царе

## Глава 3: Падежные окончания

### 3.1 Общие правила образования падежей

#### Для существительных:

**Именительный падеж** - исходная форма:
- стол, книга, море, окно

**Родительный падеж:**
- Мужской род: -а/-я (стола, музея), -ов/-ев (столов, музеев)
- Женский род: -ы/-и (книги, тетради), -ей (песен)
- Средний род: -а/-я (окна, моря)

**Дательный падеж:**
- Мужской/средний: -у/-ю (столу, морю)
- Женский: -е/-е (книге, тетради)
- Множественное: -ам/-ям (столам, музеям)

**Винительный падеж:**
- Одушевленные: как дательный падеж
- Неодушевленные: как именительный падеж

**Творительный падеж:**
- Мужской/средний: -ом/-ем (столом, морем)
- Женский: -ой/-ей (книгой, тетрадью)
- Множественное: -ами/-ями (столами, музеями)

**Предложный падеж:**
- Мужской/средний: -е/-е (в столе, о море)
- Женский: -е/-е (в книге, о тетради)
- Множественное: -ах/-ях (в столах, о музеях)

### 3.2 Особые случаи

#### Существительные на -ия, -ие, -ий:
- армия → армии (не армий!)
- санаторий → санаторию (не санаторию!)

#### Существительные на -мя:
- время → времени (не времён!)
- племя → племени

#### Неизменяемые существительные:
- пальто, метро, кино - не изменяются по падежам
- кофе, радио - могут иметь разговорные формы

## Глава 4: Падежи и другие части речи

### 4.1 Прилагательные в падежах

Прилагательные согласуются с существительными во всех падежах:

**И.п.:** красный шар
**Р.п.:** красного шара
**Д.п.:** красному шару
**В.п.:** красный шар
**Т.п.:** красным шаром
**П.п.:** о красном шаре

### 4.2 Местоимения

Местоимения имеют свои особенности в падежах:

**я → меня, мне, мной, обо мне**
**ты → тебя, тебе, тобой, о тебе**
**он → его, ему, им, о нём**
**она → её, ей, ею, о ней**
**оно → его, ему, им, о нём**
**мы → нас, нам, нами, о нас**
**вы → вас, вам, вами, о вас**
**они → их, им, ими, о них**

### 4.3 Числительные

Количественные числительные имеют особые формы:

**два → двух, двоим, двумя, о двоих**
**три, четыре → трёх, троим, тремя, о трёх**
**пять-десять → пяти, пяти, пятью, о пяти**

## Глава 5: Типичные ошибки и как их избежать

### 5.1 Смешение падежей

**Неправильно:** "Я интересуюсь о музыке"
**Правильно:** "Я интересуюсь музыкой" (Т.п. без предлога)

**Неправильно:** "Приехал на вокзал"
**Правильно:** "Приехал на вокзал" (В.п. с предлогом "на")

### 5.2 Ошибки в окончаниях

**Неправильно:** "У моего друга" (нужен Р.п.)
**Правильно:** "У моего друга" ✓

**Неправильно:** "Благодарен подруге" (нужен Д.п.)
**Правильно:** "Благодарен подруге" ✓

### 5.3 Предлоги и падежи

**Неправильно:** "Согласно графика" (нужен Р.п.)
**Правильно:** "Согласно графику" ✓

**Неправильно:** "Благодаря дождю" (Д.п.)
**Правильно:** "Благодаря дождю" ✓

## Глава 6: Практические упражнения

### Упражнение 1: Определите падежи

1. Студент читает книгу. (И.п., В.п.)
2. Я дал подарок сестре. (В.п., Д.п.)
3. Мы живем в большом городе. (П.п.)
4. Он работает врачом. (Т.п.)
5. У меня нет времени. (Р.п.)

### Упражнение 2: Измените по падежам

**Дом** (И.п.)
- Р.п.: дома
- Д.п.: дому
- В.п.: дом
- Т.п.: домом
- П.п.: о доме

**Книга** (И.п.)
- Р.п.: книги
- Д.п.: книге
- В.п.: книгу
- Т.п.: книгой
- П.п.: о книге

### Упражнение 3: Вставьте пропущенные окончания

1. Я живу в нов__ дом__. (П.п.)
2. Он подарил цвет__ сестр__. (В.п., Д.п.)
3. Мы гуляли по широк__ улиц__. (Д.п.)
4. Она работает в больш__ компан__. (П.п.)
5. Я думаю о сво__ будущ__. (П.п.)

### Упражнение 4: Выберите правильный вариант

1. Я интересуюсь (о музыке/музыкой/музыки)
2. Приехал (на вокзал/на вокзале/в вокзал)
3. Благодарен (родителям/родителями/о родителях)
4. Согласно (приказу/приказом/приказа)
5. Вопреки (совету/советом/совета)

## Глава 7: Падежи в художественной литературе

### 7.1 Стилистическая роль падежей

Падежи могут создавать особую выразительность:

**Инверсия:** "Не ветер бушует над бором" (И.п. вместо Р.п.)
**Многоступенчатые конструкции:** "Друг моего отца" (цепочка принадлежности)
**Поэтические обороты:** "О времени и о себе" (П.п. для философских размышлений)

### 7.2 Падежи в пословицах и поговорках

- "Век живи - век учись" (И.п. для вечности)
- "Без труда нет плода" (Р.п. для отрицания)
- "Делу время, потехе час" (Д.п. для назначения)
- "Взялся за гуж - не говори, что не дюж" (В.п. для объекта)
- "Тише едешь - дальше будешь" (Т.п. для сравнения)
- "Взято с бою" (П.п. для обстоятельства)

## Глава 8: Современные тенденции в использовании падежей

### 8.1 Разговорный стиль

В разговорной речи падежи часто упрощаются:
- "У моей мамы" → "У мамы"
- "В большом городе" → "В городе"
- "С моим другом" → "С другом"

### 8.2 Интернет-коммуникация

В соцсетях и мессенджерах:
- Экономия падежей: "Встретимся завтра?"
- Смайлики вместо падежных конструкций
- Английские заимствования без изменения

### 8.3 Профессиональный язык

В научной и деловой речи падежи используются строго:
- "В соответствии с договором" (Т.п.)
- "Согласно распоряжению" (Д.п.)
- "Во исполнение приказа" (В.п.)

## Глава 9: Заключение

Падежи - это фундамент русского языка, который позволяет точно и красиво выражать мысли. Освоив падежи, вы сможете:

1. Строить правильные предложения
2. Понимать сложные тексты
3. Писать грамотно и стильно
4. Общаться без языковых барьеров

Помните: падежи - это не скучная грамматика, а ключ к богатству русского языка!

## Глава 10: Дополнительные материалы

### 10.1 Полезные ссылки
- "Русская грамматика" под редакцией Н.Ю. Шведовой
- "Современный русский язык" под редакцией Л.А. Новикова
- Онлайн-тесты по падежам на сайте gramota.ru

### 10.2 Рекомендуемая литература
1. Розенталь Д.Э. "Русский язык"
2. Валгина Н.С. "Синтаксис современного русского языка"
3. Белошапкова В.А. "Современный русский язык"

### 10.3 Практические советы
1. Читайте вслух, проговаривая окончания
2. Ведите дневник с падежными упражнениями
3. Играйте в игры типа "падежный домино"
4. Используйте мобильные приложения для тренировки

Успехов в изучении падежей русского языка!
    `,
    examples: [
      'Книга (И.п.) лежит на столе.',
      'У студента (Р.п.) есть книга.',
      'Дал книгу другу (Д.п.).',
      'Вижу книгу (В.п.) на столе.',
      'Пишу ручкой (Т.п.).',
      'Говорю о книге (П.п.).',
      'Москва - столица России (И.п. в назывном предложении)',
      'Нет времени на размышления (Р.п. отрицания)',
      'Подошел к окну (Д.п. с предлогом)',
      'Люблю классическую музыку (В.п. объекта чувства)',
      'Работаю учителем (Т.п. профессии)',
      'Думаю о будущем (П.п. темы)',
      'В соответствии с планом (Т.п. с предлогом)',
      'Благодаря поддержке (Д.п. с предлогом)',
      'Вопреки ожиданиям (Д.п. с предлогом)',
      'Согласно договору (Д.п. с предлогом)',
      'Во исполнение распоряжения (В.п. с предлогом)',
      'О времени и о себе (П.п. философский)',
      'Век живи - век учись (И.п. для вечности)',
      'Без труда нет плода (Р.п. для отрицания)',
      'Делу время, потехе час (Д.п. для назначения)',
      'Взялся за гуж - не говори, что не дюж (В.п. для объекта)',
      'Тише едешь - дальше будешь (Т.п. для сравнения)',
      'Взято с бою (П.п. для обстоятельства)',
      'Студент (И.п.) читает интересную книгу (В.п.) преподавателя (Р.п.)',
      'Я (И.п.) помогаю (Д.п.) своему другу (Д.п.) в трудную минуту (В.п.)',
      'Мы (И.п.) гуляем (Т.п.) по красивому парку (Д.п.) с собаками (Т.п.)',
      'Она (И.п.) думает (П.п.) о своем будущем (П.п.) и мечтает (П.п.) о путешествиях (П.п.)',
      'Врач (И.п.) лечит (В.п.) пациента (В.п.) в больнице (П.п.) лекарствами (Т.п.)',
      'Учитель (И.п.) объясняет (В.п.) урок (В.п.) ученикам (Д.п.) мелом (Т.п.)',
      'Птица (И.п.) сидит (П.п.) на ветке (П.п.) дерева (Р.п.) в саду (П.п.)',
      'Ребенок (И.п.) играет (Т.п.) с мячом (Т.п.) на площадке (П.п.) с друзьями (Т.п.)',
      'Повар (И.п.) готовит (В.п.) обед (В.п.) из свежих продуктов (Р.п.) на кухне (П.п.)',
      'Художник (И.п.) рисует (В.п.) картину (В.п.) маслом (Т.п.) в мастерской (П.п.)',
      'Спортсмен (И.п.) тренируется (Т.п.) каждый день (В.п.) в зале (П.п.) с тренером (Т.п.)',
      'Студентка (И.п.) учится (Д.п.) русскому языку (Д.п.) в университете (П.п.) с энтузиазмом (Т.п.)',
      'Путешественник (И.п.) исследует (В.п.) древние города (В.п.) с рюкзаком (Т.п.) по миру (Д.п.)',
      'Музыкант (И.п.) играет (В.п.) мелодию (В.п.) на скрипке (П.п.) для публики (Д.п.)',
      'Садовник (И.п.) ухаживает (В.п.) за цветами (Т.п.) в саду (П.п.) с любовью (Т.п.)',
      'Программист (И.п.) пишет (В.п.) код (В.п.) на компьютере (П.п.) всю ночь (В.п.)',
      'Журналист (И.п.) пишет (В.п.) статью (В.п.) о событии (П.п.) для газеты (Р.п.)',
      'Водитель (И.п.) ведет (В.п.) машину (В.п.) по дороге (Д.п.) осторожно (Т.п.)',
      'Фотограф (И.п.) снимает (В.п.) пейзаж (В.п.) фотоаппаратом (Т.п.) на рассвете (П.п.)',
      'Ученый (И.п.) проводит (В.п.) эксперимент (В.п.) в лаборатории (П.п.) с коллегами (Т.п.)',
      'Актер (И.п.) играет (В.п.) роль (В.п.) в спектакле (П.п.) с талантом (Т.п.)',
      'Продавец (И.п.) обслуживает (В.п.) покупателя (В.п.) в магазине (П.п.) вежливо (Т.п.)',
      'Архитектор (И.п.) проектирует (В.п.) здание (В.п.) для города (Р.п.) с фантазией (Т.п.)',
      'Психолог (И.п.) помогает (Д.п.) людям (Д.п.) решать проблемы (В.п.) профессионально (Т.п.)',
      'Историк (И.п.) изучает (В.п.) прошлое (В.п.) по документам (Д.п.) в архиве (П.п.)',
      'Биолог (И.п.) наблюдает (В.п.) за животными (Т.п.) в лесу (П.п.) с биноклем (Т.п.)',
      'Экономист (И.п.) анализирует (В.п.) рынок (В.п.) с помощью графиков (Р.п.) в офисе (П.п.)',
      'Философ (И.п.) размышляет (В.п.) о смысле жизни (П.п.) сидя (Т.п.) в кресле (П.п.)',
      'Поэт (И.п.) пишет (В.п.) стихи (В.п.) о любви (П.п.) вдохновенно (Т.п.)',
      'Инженер (И.п.) строит (В.п.) мост (В.п.) через реку (В.п.) с расчетами (Т.п.)',
      'Юрист (И.п.) защищает (В.п.) интересы клиента (Р.п.) в суде (П.п.) аргументированно (Т.п.)',
      'Медсестра (И.п.) ухаживает (В.п.) за больным (Т.п.) в палате (П.п.) заботливо (Т.п.)',
      'Переводчик (И.п.) переводит (В.п.) текст (В.п.) с русского на английский (В.п.) точно (Т.п.)',
      'Скульптор (И.п.) ваяет (В.п.) статую (В.п.) из мрамора (Р.п.) в студии (П.п.)',
      'Директор (И.п.) руководит (Т.п.) компанией (Т.п.) эффективно (Т.п.) с командой (Т.п.)',
      'Библиотекарь (И.п.) рекомендует (В.п.) книги (В.п.) читателям (Д.п.) по интересам (Д.п.)',
      'Пилот (И.п.) управляет (Т.п.) самолетом (Т.п.) в небе (П.п.) уверенно (Т.п.)',
      'Дизайнер (И.п.) создает (В.п.) логотип (В.п.) для бренда (Р.п.) в программе (П.п.)',
      'Ветеринар (И.п.) лечит (В.п.) животных (В.п.) в клинике (П.п.) препаратами (Т.п.)',
      'Геолог (И.п.) исследует (В.п.) породы (В.п.) горных пород (Р.п.) в поле (П.п.)',
      'Математик (И.п.) решает (В.п.) задачи (В.п.) с формулами (Т.п.) на доске (П.п.)',
      'Лингвист (И.п.) изучает (В.п.) языки (В.п.) народов мира (Р.п.) с интересом (Т.п.)',
      'Эколог (И.п.) защищает (В.п.) окружающую среду (В.п.) от загрязнения (Р.п.) активно (Т.п.)',
      'Астроном (И.п.) наблюдает (В.п.) звезды (В.п.) через телескоп (В.п.) ночью (Т.п.)',
      'Химик (И.п.) проводит (В.п.) реакции (В.п.) в лаборатории (П.п.) с реактивами (Т.п.)',
      'Физик (И.п.) изучает (В.п.) законы природы (Р.п.) с экспериментами (Т.п.) в институте (П.п.)'
    ]
  },
  '0-1': {
    title: 'Именительный падеж',
    theory: `
# Именительный падеж

## Что это такое?

**Именительный падеж** - первый и основной падеж в русском языке. Он отвечает на вопросы **кто? что?**

## Когда используется?

- **Подлежащее** в предложении: *Студент читает книгу.*
- **Именная часть сказуемого**: *Это моя книга.*
- **Обращение**: *Маша, подойди сюда.*
- **Название**: *Москва - столица России.*

## Формы слов в именительном падеже

### Существительные:
- **Мужской род**: стол, дом, карандаш
- **Женский род**: книга, мама, тетрадь
- **Средний род**: окно, море, здание
- **Множественное число**: столы, книги, окна

### Прилагательные:
- **Мужской**: хороший, большой, красный
- **Женский**: хорошая, большая, красная
- **Средний**: хорошее, большое, красное
- **Множественное**: хорошие, большие, красные

## Важно запомнить!

Именительный падеж - это **исходная форма** слова. Все остальные падежи образуются от именительного падежа.

## Примеры:

**Подлежащее:** Собака лает. Книга лежит на столе.
**Именная часть:** Это мой брат. Она студентка.
**Обращение:** Саша, иди домой!
    `,
    examples: [
      'Студент (подлежащее) читает книгу.',
      'Это моя (именная часть) книга.',
      'Маша (обращение), подойди сюда.',
      'Москва (название) - столица России.'
    ]
  },
  '0-2': {
    title: 'Родительный падеж',
    theory: `
# Родительный падеж

## Что это такое?

**Родительный падеж** - второй падеж в русском языке. Он отвечает на вопросы **кого? чего?**

## Когда используется?

### Без предлогов:
- **Принадлежность**: книга **студента**, дом **отца**
- **Количество**: много **книг**, мало **времени**
- **Отрицание**: нет **книги**, не вижу **друга**

### С предлогами:
- **из/с**: вышел **из дома**, вернулся **с работы**
- **у**: был **у друга**, спросил **у учителя**
- **от**: получил письмо **от мамы**
- **до**: работал **до вечера**
- **для**: купил подарок **для сестры**

## Формы слов

### Окончания существительных:

**Мужской род:**
- После согласных: -а (стола, дома)
- После гласных: -я (музея, героя)

**Женский род:**
- -ы/-и (книги, тетради)
- -и после ж/ш/щ/ч/щ: (мыши, души)

**Средний род:**
- -а (окна, моря)

**Множественное число:**
- -ов/-ев (столов, музеев)
- -ей (книг, тетрадей)

## Примеры:

**Принадлежность:** книга **студента**, дом **родителей**
**Количество:** стакан **воды**, пачка **масла**
**Отрицание:** нет **времени**, не вижу **дороги**
    `,
    examples: [
      'Книга студента (принадлежность)',
      'Много книг (количество)',
      'Нет времени (отрицание)',
      'Вышел из дома (предлог из)',
      'Был у друга (предлог у)'
    ]
  },
  '0-3': {
    title: 'Дательный падеж',
    theory: `
# Дательный падеж

## Что это такое?

**Дательный падеж** - третий падеж в русском языке. Он отвечает на вопросы **кому? чему?**

## Когда используется?

### Без предлогов:
- **Косвенное дополнение**: дал **книгу другу**, помогаю **маме**
- **Возраст**: ему **20 лет**, ей **15 лет**

### С предлогами:
- **к**: подошел **к дому**, отношусь **к другу**
- **по**: гуляю **по парку**, работаю **по специальности**
- **благодаря**: закончил благодаря **помощи**

## Формы слов

### Окончания существительных:

**Мужской род:**
- После согласных: -у (столу, дому)
- После гласных: -ю (музею, герою)

**Женский род:**
- -е (книге, тетради)
- -е после ж/ш/щ/ч/щ: (мыше, душе)

**Средний род:**
- -у (окну, морю)

**Множественное число:**
- -ам/-ям (столам, музеям)

## Примеры:

**Косвенное дополнение:** Дал книгу **другу**. Помогаю **маме**.
**Возраст:** Ему **двадцать** лет.
**Предлоги:** Подошел **к дому**. Гуляю **по парку**.
    `,
    examples: [
      'Дал книгу другу (косвенное дополнение)',
      'Ему 20 лет (возраст)',
      'Подошел к дому (предлог к)',
      'Гуляю по парку (предлог по)',
      'Благодаря помощи (предлог благодаря)'
    ]
  },
  '0-4': {
    title: 'Винительный падеж',
    theory: `
# Винительный падеж

## Что это такое?

**Винительный падеж** - четвертый падеж в русском языке. Он отвечает на вопросы **кого? что?**

## Когда используется?

- **Прямое дополнение**: вижу **книгу**, читаю **газету**
- **Движение куда?**: иду **в магазин**, еду **в Москву**
- **Время**: пришел **вечером**, уехал **утром**
- **Отрицание**: не вижу **картины**

## Формы слов

### Окончания существительных:

**Мужской род (одушевленные):**
- = Дательный падеж: вижу **друга**, встречаю **отца**

**Мужской род (неодушевленные):**
- = Именительный падеж: читаю **журнал**, пью **чай**

**Женский род:**
- -у (книгу, тетрадь)
- После ж/ш/щ/ч/щ: -у (мышь, душ)

**Средний род:**
- = Именительный падеж: вижу **окно**, люблю **море**

**Множественное число:**
- -ов/-ев для одушевленных (вижу **братьев**)
- = Именительный для неодушевленных (читаю **журналы**)

## Важное правило!

**Одушевленные существительные** в винительном падеже имеют форму **дательного падежа**.
**Неодушевленные существительные** в винительном падеже имеют форму **именительного падежа**.

## Примеры:

**Прямое дополнение:** Читаю **книгу**. Вижу **друга**.
**Движение:** Иду **в магазин**. Еду **в Москву**.
**Время:** Пришел **вечером**.
    `,
    examples: [
      'Читаю книгу (прямое дополнение)',
      'Вижу друга (одушевленное существительное)',
      'Иду в магазин (движение)',
      'Пришел вечером (время)',
      'Не вижу картины (отрицание)'
    ]
  },
  '0-5': {
    title: 'Творительный падеж',
    theory: `
# Творительный падеж

## Что это такое?

**Творительный падеж** - пятый падеж в русском языке. Он отвечает на вопросы **кем? чем?**

## Когда используется?

### Без предлогов:
- **Инструмент действия**: пишу **ручкой**, режу **ножом**
- **Способ действия**: говорю **шепотом**, двигаюсь **пешком**

### С предлогами:
- **с**: гуляю **с другом**, пью чай **с лимоном**
- **за**: сижу **за столом**, стою **за дверью**
- **под**: лежу **под одеялом**, сижу **под деревом**
- **над**: вишу **над пропастью**, летаю **над городом**
- **между**: сижу **между друзьями**
- **перед**: стою **перед домом**

## Формы слов

### Окончания существительных:

**Мужской род:**
- -ом/-ем (столом, музеем)

**Женский род:**
- -ой/-ей (книгой, тетрадью)
- После ж/ш/щ/ч/щ: -ой/-ей (мышой, душой)

**Средний род:**
- -ом/-ем (окном, морем)

**Множественное число:**
- -ами/-ями (столами, музеями)

## Примеры:

**Инструмент:** Пишу **ручкой**. Режу **ножом**.
**Способ:** Говорю **шепотом**. Двигаюсь **пешком**.
**Предлоги:** Гуляю **с другом**. Сижу **за столом**.
    `,
    examples: [
      'Пишу ручкой (инструмент)',
      'Говорю шепотом (способ)',
      'Гуляю с другом (предлог с)',
      'Сижу за столом (предлог за)',
      'Стою перед домом (предлог перед)'
    ]
  },
  '0-6': {
    title: 'Предложный падеж',
    theory: `
# Предложный падеж

## Что это такое?

**Предложный падеж** - шестой и последний падеж в русском языке. Он отвечает на вопросы **о ком? о чём?**

## Когда используется?

### Только с предлогами:
- **о/об**: говорю **о книге**, думаю **об учебе**
- **в**: живу **в доме**, учусь **в школе**
- **на**: лежу **на диване**, работаю **на заводе**
- **при**: был **при дворе**, работаю **при университете**

## Формы слов

### Окончания существительных:

**Мужской род:**
- -е/-ё (в столе, на море)

**Женский род:**
- -е/-ё (в книге, на тетради)
- После ж/ш/щ/ч/щ: -е (на душе)

**Средний род:**
- -е/-ё (в окне, на море)

**Множественное число:**
- -ах/-ях (в столах, о музеях)

## Важные правила!

1. Предложный падеж **всегда используется с предлогами**.
2. Без предлогов этот падеж **не употребляется**.
3. Окончание **-е** после согласных, **-ё** после мягких согласных.

## Примеры:

**Предлог о/об:** Говорю **о книге**. Думаю **об учебе**.
**Предлог в:** Живу **в доме**. Учусь **в школе**.
**Предлог на:** Лежу **на диване**. Работаю **на заводе**.
**Предлог при:** Работаю **при университете**.
    `,
    examples: [
      'Говорю о книге (предлог о)',
      'Живу в доме (предлог в)',
      'Лежу на диване (предлог на)',
      'Работаю при университете (предлог при)',
      'Думаю об учебе (предлог об)'
    ]
  },
  '0-7': {
    title: 'Практика падежей в предложениях',
    theory: `
# Практика падежей в предложениях

## Как определить падеж?

Чтобы определить падеж существительного, нужно:

1. **Задать вопросы**: кто? что? кого? чего? кому? чему? и т.д.
2. **Посмотреть на окончание** слова
3. **Учесть предлоги** (для предложного падежа)

## Памятка по вопросам:

- **И.п.** - кто? что? (основной)
- **Р.п.** - кого? чего? (принадлежность, количество)
- **Д.п.** - кому? чему? (направление)
- **В.п.** - кого? что? (объект действия)
- **Т.п.** - кем? чем? (инструмент, способ)
- **П.п.** - о ком? о чём? (тема разговора)

## Практические задания:

### Задание 1: Определите падежи
1. Книга лежит **на столе**. (на чем?)
2. Я дал книгу **другу**. (кому?)
3. Я вижу **собаку**. (что?)
4. Я пишу **ручкой**. (чем?)

### Задание 2: Измените падежи
- Дом (И.п.) → в доме (П.п.)
- Книга (И.п.) → книги (Р.п.)
- Друг (И.п.) → другу (Д.п.)

### Задание 3: Постройте предложения
Используйте слова в правильном падеже:
- Я, идти, магазин (В.п.)
- Книга, лежать, стол (П.п.)
- Я, писать, ручка (Т.п.)
    `,
    examples: [
      'Книга лежит на столе. (Предложный падеж)',
      'Я дал книгу другу. (Дательный падеж)',
      'Я вижу собаку. (Винительный падеж)',
      'Я пишу ручкой. (Творительный падеж)'
    ]
  }
};

const Lesson = () => {
  const { courseId, moduleId, lessonId } = useParams<{ courseId: string; moduleId: string; lessonId: string }>();
  const { user, completeLesson, updateAchievementProgress, updatePerformanceMetrics } = useAuth();
  const navigate = useNavigate();

  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [lessonStartTime, setLessonStartTime] = useState<Date>(new Date());
  const [aiAvatarPosition, setAiAvatarPosition] = useState(50); // Начальная позиция в центре
  const [lessonData, setLessonData] = useState<any>(null);
  const [isGeneratingContent, setIsGeneratingContent] = useState(false);
  const [generatedImages, setGeneratedImages] = useState<{[key: string]: string}>({});
  const chatScrollRef = useRef<HTMLDivElement>(null);

  const lessonKey = `${courseId}-${moduleId}-${lessonId}`;
  const baseLesson = lessonContent[lessonKey];

  // Проверяем валидность параметров
  const moduleIndex = parseInt(moduleId || '0');
  const lessonIndex = parseInt(lessonId || '0');
  const isValidParams = !isNaN(moduleIndex) && !isNaN(lessonIndex) && moduleIndex >= 0 && lessonIndex >= 0;

  // Получаем информацию о курсе и модуле
  const courseInfo = getCourseAndModuleInfo(moduleIndex.toString(), lessonIndex.toString());

  // Определяем тему урока
  let lessonTopic = baseLesson ? baseLesson.title : courseInfo.moduleName;

  // Для персонализированных курсов берем название урока из массива
  if (user?.personalizedCourse && courseId === user.personalizedCourse.id) {
    const module = user.personalizedCourse.modules[moduleIndex];
    if (module && module.lessons && module.lessons[lessonIndex]) {
      lessonTopic = module.lessons[lessonIndex];
    }
  }

  // Функция для генерации изображений через DALL-E 3
  const generateImage = async (description: string): Promise<string | null> => {
    try {
      console.log('🖼️  Requesting image generation for:', description);
      
      const response = await fetch('http://localhost:4002/api/images/generations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'dall-e-3',
          prompt: `Educational illustration for a lesson: ${description}. Create a clear, professional, educational image suitable for learning. High quality, detailed, informative.`,
          size: '1024x1024',
          quality: 'standard',
          n: 1,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
        console.error('❌ Image generation failed:', response.status, errorData);
        throw new Error(`Failed to generate image: ${response.status} - ${JSON.stringify(errorData)}`);
      }

      const data = await response.json();
      console.log('✅ Image generated successfully:', data.data[0].url);
      return data.data[0].url;
    } catch (error) {
      console.error('❌ Error generating image:', error);
      return null;
    }
  };

  // Функция для рендеринга таблицы
  const renderTable = (tableData: string) => {
    try {
      const parts = tableData.split(' | ');
      const title = parts[0];
      const headers = parts[1].split(',');
      const rows = parts.slice(2).map(row => row.split(','));

      return `
        <div class="my-4 overflow-x-auto">
          <h4 class="font-semibold mb-2 text-center">${title}</h4>
          <table class="min-w-full border-collapse border border-gray-300 rounded-lg overflow-hidden">
            <thead>
              <tr class="bg-gray-50">
                ${headers.map(header => `<th class="border border-gray-300 px-4 py-2 text-left font-medium">${header.trim()}</th>`).join('')}
              </tr>
            </thead>
            <tbody>
              ${rows.map((row, index) => `
                <tr class="${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}">
                  ${row.map(cell => `<td class="border border-gray-300 px-4 py-2">${cell.trim()}</td>`).join('')}
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>
      `;
    } catch (error) {
      console.error('Error rendering table:', error);
      return `<div class="text-red-500">Ошибка отображения таблицы</div>`;
    }
  };

  // Функция для рендеринга диаграммы
  const renderChart = (chartData: string, chartId: string) => {
    try {
      const parts = chartData.split(' | ');
      const chartType = parts[0].toLowerCase();
      const title = parts[1];
      const labels = parts[2].split(',');
      const dataValues = parts[3].split(',').map(v => parseFloat(v.trim()));

      const data = {
        labels: labels.map(l => l.trim()),
        datasets: [{
          label: title,
          data: dataValues,
          backgroundColor: [
            'rgba(59, 130, 246, 0.8)',
            'rgba(16, 185, 129, 0.8)',
            'rgba(245, 158, 11, 0.8)',
            'rgba(239, 68, 68, 0.8)',
            'rgba(139, 92, 246, 0.8)',
            'rgba(236, 72, 153, 0.8)',
          ],
          borderColor: [
            'rgba(59, 130, 246, 1)',
            'rgba(16, 185, 129, 1)',
            'rgba(245, 158, 11, 1)',
            'rgba(239, 68, 68, 1)',
            'rgba(139, 92, 246, 1)',
            'rgba(236, 72, 153, 1)',
          ],
          borderWidth: 2,
        }],
      };

      const options = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top' as const,
          },
          title: {
            display: true,
            text: title,
          },
        },
      };

      // Создаем уникальный ID для диаграммы
      const uniqueId = `chart-${chartId}-${Date.now()}`;

      // Асинхронно создаем диаграмму
      setTimeout(() => {
        const canvas = document.getElementById(uniqueId) as HTMLCanvasElement;
        if (canvas && canvas.getContext) {
          const ctx = canvas.getContext('2d');
          if (ctx) {
            let chart;
            switch (chartType) {
              case 'bar':
                chart = new ChartJS(ctx, { type: 'bar', data, options });
                break;
              case 'line':
                chart = new ChartJS(ctx, { type: 'line', data, options });
                break;
              case 'pie':
                chart = new ChartJS(ctx, { type: 'pie', data, options });
                break;
              case 'doughnut':
                chart = new ChartJS(ctx, { type: 'doughnut', data, options });
                break;
              default:
                chart = new ChartJS(ctx, { type: 'bar', data, options });
            }
          }
        }
      }, 100);

      return `<div class="my-4">
                <div class="h-64">
                  <canvas id="${uniqueId}"></canvas>
                </div>
              </div>`;

    } catch (error) {
      console.error('Error rendering chart:', error);
      return `<div class="text-red-500">Ошибка отображения диаграммы</div>`;
    }
  };

  // Функция для форматирования контента урока с поддержкой ### блоков, изображений, таблиц и диаграмм
  const formatLessonContent = (content: string) => {
    let chartCounter = 0;

    return content
      // Обработка маркеров изображений **[IMAGE: описание]**
      .replace(/\*\*\[IMAGE:\s*(.+?)\]\*\*/g, (match, description) => {
        const imageKey = `image_${Object.keys(generatedImages).length}`;
        // Если изображение еще не сгенерировано, запускаем генерацию
        if (!generatedImages[imageKey]) {
          generateImage(description.trim()).then(imageUrl => {
            if (imageUrl) {
              setGeneratedImages(prev => ({
                ...prev,
                [imageKey]: imageUrl
              }));
            }
          }).catch(error => {
            console.error('Error generating inline image:', error);
          });
          // Пока изображение генерируется, показываем плейсхолдер
          return '[Генерация изображения...]';
        } else {
          // Изображение уже сгенерировано, показываем его
          return `[Изображение: ${description.trim()}]`;
        }
      })
      // Обработка маркеров таблиц **[TABLE: ...]**
      .replace(/\*\*\[TABLE:\s*(.+?)\]\*\*/g, (match, tableData) => {
        return renderTable(tableData);
      })
      // Обработка маркеров диаграмм **[CHART: ...]**
      .replace(/\*\*\[CHART:\s*(.+?)\]\*\*/g, (match, chartData) => {
        chartCounter++;
        return renderChart(chartData, chartCounter.toString());
      })
      // Сохранение переносов строк
      .replace(/\n/g, '<br>');
  };

  // Функция генерации персонализированного контента урока
  const generateLessonContent = async (topic: string, userLevel: string, weakTopics: string[] = []) => {
    // Определяем название курса для промпта
    let courseName = courseInfo.courseName;
    if (user?.personalizedCourse && courseId === user.personalizedCourse.id) {
      // Для персонализированных курсов используем их название
      courseName = user.personalizedCourse.title;
    }

    try {
      const prompt = `
Ты - опытный преподаватель ${courseName}. Создай подробный урок по теме "${topic}" для ученика уровня "${userLevel}".

ВАЖНЫЕ ИНСТРУКЦИИ:
- Строго придерживайся темы "${topic}" - не добавляй контент из русского языка, грамматики или других предметов
- Создавай контент, релевантный именно этой теме
- Если тема не связана с языком, не используй примеры с падежами, склонением или грамматическими конструкциями
- Фокусируйся на практических аспектах темы
- Адаптируй тип упражнений под тему:
  * Для технических тем (ремонт, программирование): практические задания, пошаговые инструкции, диагностика проблем
  * Для языковых тем: упражнения на применение правил, составление текстов
  * Для научных тем: расчеты, анализ, применение формул
  * Для творческих тем: проекты, создание контента

${weakTopics.length > 0 ? `Ученик имеет слабые места в следующих темах: ${weakTopics.join(', ')}. Уделите особое внимание этим аспектам.` : ''}

Структура урока должна включать:

# ${topic}

## Введение в тему

## Основные понятия и правила

## Подробные объяснения с примерами

## Практические упражнения

Создай упражнения, которые имеют практическую ценность для темы "${topic}". Не используй абстрактные упражнения типа "напишите три предложения" или "перечислите признаки". Сделай упражнения конкретными и полезными для применения знаний на практике.

## Типичные ошибки и как их избежать

## Дополнительные материалы

Используй markdown форматирование. Контент должен быть подробным, понятным и адаптированным под уровень ученика.

Если тема подходит для визуального объяснения, вставляй изображения, таблицы и диаграммы непосредственно в текст с помощью специальных маркеров:

**Изображения:**
- Маркер: **[IMAGE: описание изображения]**
- Для схем, чертежей, иллюстраций внешнего вида

**Таблицы:**
- Маркер: **[TABLE: заголовок таблицы | колонка1,колонка2,колонка3 | строка1_знач1,строка1_знач2,строка1_знач3 | строка2_знач1,...]**
- Для сравнения данных, характеристик, спецификаций

**Диаграммы:**
- Маркер: **[CHART: тип_диаграммы | заголовок | метки_через_запятую | значения_через_запятую]**
- Типы: bar, line, pie, doughnut
- Для визуализации данных, трендов, распределений

Примеры:
- Изображение: **[IMAGE: диаграмма внутреннего устройства наушников]**
- Таблица: **[TABLE: Характеристики проводов | Материал,Прочность,Цена | Медь,Высокая,Дорого | Алюминий,Средняя,Дешево]**
- Диаграмма: **[CHART: bar | Популярность типов наушников | Беспроводные,Проводные,Спортивные | 65,25,10]**

Верни ответ в формате JSON:
{
  "title": "Название урока",
  "theory": "Полный текст теории в markdown с маркерами изображений",
  "examples": ["массив примеров и упражнений по теме"]
}
`;

      const response = await fetch('http://localhost:4002/api/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: `Ты - опытный преподаватель ${courseName}. Создавай подробные, понятные уроки с множеством примеров и упражнений. Строго придерживайся темы "${topic}" и не добавляй контент из других предметов.`,
            },
            {
              role: 'user',
              content: prompt,
            },
          ],
          max_tokens: 4000,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate lesson content');
      }

      const data = await response.json();
      const generatedContent = JSON.parse(data.choices[0].message.content.replace(/```json\n?|\n?```/g, ''));

      // Сохраняем в localStorage для кеширования
      const cacheKey = `lesson_${lessonKey}_${user?.id || 'guest'}`;
      localStorage.setItem(cacheKey, JSON.stringify({
        ...generatedContent,
        generatedAt: Date.now(),
        userLevel,
        weakTopics
      }));

      return generatedContent;
    } catch (error) {
      console.error('Error generating lesson content:', error);
      // Возвращаем базовый контент в случае ошибки
      return baseLesson;
    }
  };

  // Загрузка контента урока
  useEffect(() => {
    const loadLessonContent = async () => {
      setIsGeneratingContent(true);

      try {
        const cacheKey = `lesson_${lessonKey}_${user?.id || 'guest'}`;
        const cachedData = localStorage.getItem(cacheKey);

        if (cachedData) {
          const parsedCache = JSON.parse(cachedData);
          const cacheAge = Date.now() - parsedCache.generatedAt;
          const isCacheFresh = cacheAge < 24 * 60 * 60 * 1000; // 24 часа

          // Проверяем, совпадают ли параметры генерации
          const userLevel = user?.knowledgeLevel || 'beginner';
          const weakTopics = user?.assessmentResult?.weakTopics || [];

          const paramsMatch = parsedCache.userLevel === userLevel &&
                            JSON.stringify(parsedCache.weakTopics) === JSON.stringify(weakTopics);

          if (isCacheFresh && paramsMatch) {
            setLessonData(parsedCache);
            setIsGeneratingContent(false);
            return;
          }
        }

        // Генерируем новый контент
        const generatedContent = await generateLessonContent(
          lessonTopic,
          user?.knowledgeLevel || 'beginner',
          user?.assessmentResult?.weakTopics || []
        );

        setLessonData(generatedContent);
      } catch (error) {
        console.error('Error loading lesson content:', error);
        // В случае ошибки используем базовый контент, если он существует
        if (baseLesson) {
          setLessonData(baseLesson);
        } else {
          // Если базового контента нет, показываем сообщение об ошибке
          setLessonData({
            title: lessonTopic,
            theory: `# ${lessonTopic}\n\nИзвините, произошла ошибка при загрузке контента урока. Пожалуйста, попробуйте перезагрузить страницу.`,
            examples: []
          });
        }
      } finally {
        setIsGeneratingContent(false);
      }
    };

    loadLessonContent();
  }, [lessonKey, user?.id, user?.knowledgeLevel, user?.assessmentResult?.weakTopics, lessonTopic, navigate]);

  // Если контент еще не загружен, показываем базовый или генерируемый
  const currentLesson = lessonData || baseLesson || {
    title: lessonTopic,
    theory: `# ${lessonTopic}\n\nЗагружаем контент урока...`,
    examples: []
  };

  // Static AI avatar position
  useEffect(() => {
    // Устанавливаем фиксированную позицию для аватара
    setAiAvatarPosition(50); // Центр экрана
  }, []);

  // Track lesson start time
  useEffect(() => {
    setLessonStartTime(new Date());
  }, [courseId, moduleId, lessonId]);

  // Track study time when leaving the lesson
  useEffect(() => {
    return () => {
      if (lessonStartTime && updatePerformanceMetrics) {
        const studyTimeMinutes = Math.round((new Date().getTime() - lessonStartTime.getTime()) / (1000 * 60));
        if (studyTimeMinutes > 0) {
          updatePerformanceMetrics({
            totalStudyTime: studyTimeMinutes
          });

          // Check for time-based achievements
          if (updateAchievementProgress) {
            if (studyTimeMinutes >= 10) {
              updateAchievementProgress('dedicated-student', studyTimeMinutes);
            }
            if (studyTimeMinutes >= 50) {
              updateAchievementProgress('marathon-runner', studyTimeMinutes);
            }
            if (studyTimeMinutes >= 100) {
              updateAchievementProgress('centurion', studyTimeMinutes);
            }
          }
        }
      }
    };
  }, [lessonStartTime, updatePerformanceMetrics, updateAchievementProgress]);

  // Аватар неподвижен
  useEffect(() => {
    // Аватар остается в фиксированной позиции
  }, []);

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputMessage,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      const response = await fetch('http://localhost:4002/api/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: `Ты - опытный преподаватель русского языка. Студент изучает тему: "${lesson?.title}".

Твоя задача:
- Объяснять материал по этой теме
- Отвечать на вопросы студента
- Давать примеры и упражнения
- Корректировать ошибки
- Поощрять обучение

Тема урока: ${lesson?.title}
Теоретический материал: ${lesson?.theory?.substring(0, 500)}...

Будь терпеливым, поддерживающим и профессиональным преподавателем.`,
            },
            ...messages.map(msg => ({
              role: msg.role,
              content: msg.content,
            })),
            {
              role: 'user',
              content: userMessage.content,
            },
          ],
          max_tokens: 800,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to get response from OpenAI');
      }

      const data = await response.json();
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: data.choices[0].message.content,
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, assistantMessage]);

      // Track achievement progress for AI questions
      if (updateAchievementProgress) {
        updateAchievementProgress('chatty-student', 1); // Increment by 1 for each question
        updateAchievementProgress('ai-disciple', 1); // Increment by 1 for each question
        updateAchievementProgress('question-asker', 1); // Increment by 1 for each question
      }
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: 'Извините, произошла ошибка при обработке вашего сообщения. Попробуйте еще раз.',
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // Проверяем доступ к уроку
  const hasAccessToLesson = () => {
    if (!user) return false;
    if (!isValidParams) return false;

    // Для персонализированных курсов проверяем, что курс существует и индексы валидны
    if (user.personalizedCourse && courseId === user.personalizedCourse.id) {
      return moduleIndex < user.personalizedCourse.modules.length &&
             lessonIndex < user.personalizedCourse.modules[moduleIndex].lessons.length;
    }

    // Для статических уроков (если они есть)
    return !!baseLesson;
  };

  if (!hasAccessToLesson()) {
    // Автоматически перенаправляем к персонализированному курсу через 2 секунды
    setTimeout(() => {
      navigate('/personalized-course');
    }, 2000);

    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-secondary/30 to-background flex items-center justify-center">
        <Card className="w-full max-w-md text-center">
          <CardContent className="p-8">
            <BookOpen className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
            <h2 className="text-xl font-semibold mb-2">Урок не найден</h2>
            <p className="text-muted-foreground mb-4">
              Возвращаемся к курсу...
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Показываем индикатор загрузки во время генерации контента
  if (isGeneratingContent) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-secondary/30 to-background flex items-center justify-center">
        <Card className="w-full max-w-md text-center">
          <CardContent className="p-8">
            <div className="flex items-center justify-center mb-4">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
            <h2 className="text-xl font-semibold mb-2">Генерация персонального урока</h2>
            <p className="text-muted-foreground mb-4">
              AI адаптирует контент под ваш уровень и слабые места...
            </p>
            <div className="w-full bg-secondary rounded-full h-2">
              <div className="bg-primary h-2 rounded-full animate-pulse" style={{ width: '60%' }} />
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-secondary/30 to-background">
      {/* Header */}
      <header className="border-b border-border/50 bg-card/50 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            {/* Left side - Back button */}
            <div className="flex items-center gap-3">
              <Button
                variant="ghost"
                onClick={() => navigate('/personalized-course')}
                className="flex items-center gap-2"
              >
                <ArrowLeft className="w-4 h-4" />
                Назад к курсу
              </Button>
            </div>

            {/* Center - Lesson title */}
            <div className="text-center">
              <h1 className="text-lg font-semibold">{currentLesson.title}</h1>
              <p className="text-sm text-muted-foreground">Урок {parseInt(lessonId || '0') + 1}</p>
            </div>

            {/* Right side - Actions */}
            <div className="flex items-center gap-2">
              <Button
                onClick={() => navigate('/chat')}
                variant="outline"
                size="sm"
              >
                <MessageSquare className="w-4 h-4 mr-2" />
                AI Помощник
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="container mx-auto px-4 py-6">
        <div className="grid lg:grid-cols-2 gap-6">
          {/* Left Side - Theory */}
          <Card className="flex flex-col">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BookOpen className="w-5 h-5 text-primary" />
                Теория и примеры
              </CardTitle>
              <CardDescription>
                Изучите материал урока
              </CardDescription>
            </CardHeader>

            <CardContent className="flex-1 overflow-hidden">
              <ScrollArea className="h-[60vh] pr-4">
                {/* Theory Content */}
                <div className="prose prose-sm max-w-none mb-6">
                  <LessonContent content={formatLessonContent(currentLesson.theory)} generatedImages={generatedImages} />
                </div>

                {/* Examples */}
                {currentLesson.examples && currentLesson.examples.length > 0 && (
                  <div className="border-t pt-4">
                    <h4 className="font-semibold mb-3">Примеры:</h4>
                    <div className="space-y-2">
                      {currentLesson.examples.map((example: string, index: number) => (
                        <div key={index} className="flex items-start gap-2 p-3 bg-muted/50 rounded-lg">
                          <CheckCircle className="w-4 h-4 text-green-500 flex-shrink-0 mt-0.5" />
                          <span className="text-sm">{example}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}


                {/* Progress Indicator */}
                <div className="border-t pt-4 mt-6">
                  <div className="flex items-center justify-between text-sm text-muted-foreground mb-2">
                    <span>Прогресс урока</span>
                    <span>75%</span>
                  </div>
                  <div className="w-full bg-secondary rounded-full h-2">
                    <div className="bg-primary h-2 rounded-full transition-all duration-300" style={{ width: '75%' }} />
                  </div>
                  <p className="text-xs text-muted-foreground mt-1">
                    Материал изучен, можно переходить к практике!
                  </p>
                </div>

                {/* Complete Lesson Button */}
                <div className="border-t pt-4 mt-6">
                  <div className="flex justify-center">
                    <Button
                      onClick={() => {
                        completeLesson(parseInt(moduleId || '0'), parseInt(lessonId || '0'));
                        navigate('/personalized-course');
                      }}
                      className="flex items-center gap-2"
                      size="lg"
                    >
                      <CheckCircle className="w-4 h-4" />
                      Завершить урок
                    </Button>
                  </div>
                </div>
              </ScrollArea>
            </CardContent>
          </Card>

          {/* Right Side - Chat */}
          <Card className="flex flex-col">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Brain className="w-5 h-5 text-primary" />
                AI Преподаватель
              </CardTitle>
              <CardDescription>
                Задавайте вопросы по теме "{currentLesson.title}"
              </CardDescription>
            </CardHeader>

            <CardContent className="flex-1 flex flex-col relative">

              {/* Messages Container with Sticky Input */}
              <div className="flex flex-col min-h-0">
                <ScrollArea ref={chatScrollRef} className="max-h-96 pr-4 pl-16">
                  <div className="space-y-4 pb-20">
                    {messages.length === 0 && (
                      <div className="text-center py-8 text-muted-foreground">
                        <MessageCircle className="w-12 h-12 mx-auto mb-4 text-primary/50" />
                      <p className="text-lg mb-2">Готов помочь с уроком!</p>
                      <p className="text-sm">Задайте вопрос о теме "{currentLesson.title}"</p>
                        <div className="mt-4 space-y-2 text-xs">
                          <p><strong>Примеры вопросов:</strong></p>
                          <div className="space-y-1 text-left max-w-xs mx-auto">
                            <p>• "Объясните этот падеж подробнее"</p>
                            <p>• "Дайте больше примеров"</p>
                            <p>• "Как запомнить окончания?"</p>
                          </div>
                        </div>
                      </div>
                    )}

                    {messages.map((message) => (
                      <div
                        key={message.id}
                        className={`flex gap-3 ${message.role === 'user' ? 'justify-end pr-4' : 'justify-start'}`}
                      >
                        <div
                          className={`max-w-[80%] rounded-lg px-4 py-2 ${
                            message.role === 'user'
                              ? 'bg-primary text-primary-foreground'
                              : 'bg-muted'
                          }`}
                        >
                          <p className="whitespace-pre-wrap text-sm">{message.content}</p>
                          <p className="text-xs opacity-70 mt-1">
                            {message.timestamp.toLocaleTimeString()}
                          </p>
                        </div>
                      </div>
                    ))}

                    {isLoading && (
                      <div className="flex gap-3 justify-start">
                        <div className="bg-muted rounded-lg px-4 py-2">
                          <div className="flex items-center gap-2">
                            <div className="flex gap-1">
                              <div className="w-2 h-2 bg-primary/50 rounded-full animate-bounce" />
                              <div className="w-2 h-2 bg-primary/50 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                              <div className="w-2 h-2 bg-primary/50 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                            </div>
                            <span className="text-sm text-muted-foreground">Преподаватель думает...</span>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </ScrollArea>

                {/* Sticky Input at Bottom */}
                <div className="sticky bottom-0 bg-card border-t border-border/50 p-4 -mx-6 -mb-6 mt-4">
                  <div className="flex gap-2">
                    <Input
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder={`Спросите о теме "${currentLesson.title}"...`}
                      disabled={isLoading}
                      className="flex-1"
                    />
                    <Button
                      onClick={sendMessage}
                      disabled={!inputMessage.trim() || isLoading}
                      size="icon"
                    >
                      <Send className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default Lesson;
